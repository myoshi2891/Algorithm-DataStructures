# この問題は文字列の最後の単語の長さを求める問題です。効率的なアプローチとして、文字列の末尾から逆向きに探索する方法を実装します。このソリューションの特徴：

# ## アルゴリズムの説明
# 1. **末尾スペーススキップ**: 文字列の末尾から開始し、スペースをスキップする
# 2. **単語長カウント**: スペース以外の文字をカウントして最後の単語の長さを求める

# ## 計算量分析
# - **時間計算量**: `O(n)` - 最悪の場合（文字列全体が1つの単語の場合）、全文字をスキャン
# - **空間計算量**: `O(1)` - 定数の追加メモリのみ使用

# ## 型安全性
# - 全ての変数に明示的な型アノテーションを付与
# - `Pylance`による型チェックエラーを回避

# ## メモリ効率
# - 追加の文字列オブジェクトや配列を生成しない
# - インプレースでの処理により最小限のメモリ使用

# この実装は、`split()`メソッドを使用する方法と比較して、メモリ使用量を削減し、特に長い文字列に対してより効率的です。


class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        """
        文字列の最後の単語の長さを返す関数

        Parameters:
        s (str): 英字とスペースで構成された文字列

        Returns:
        int: 最後の単語の長さ

        Time Complexity: O(n) - 最悪の場合、文字列全体をスキャンする必要がある
        Space Complexity: O(1) - 定数の追加メモリのみ使用
        """
        # 文字列の長さを取得
        length: int = len(s)

        # 末尾のスペースをスキップするためのインデックス
        i: int = length - 1

        # 末尾のスペースをスキップ
        while i >= 0 and s[i] == " ":
            i -= 1

        # 最後の単語の長さをカウント
        word_length: int = 0
        while i >= 0 and s[i] != " ":
            word_length += 1
            i -= 1

        return word_length

# 以下は、与えられた方程式 $x^3 + x = N$ を満たす正の実数 $x$ を **Python** で求める実装です。
# **型指定付き**で記述し、**処理時間・メモリ使用量**に配慮しています。

# ---

# ## ✅ 解法概要：二分探索

# * 関数 $f(x) = x^3 + x$ は単調増加なので、2分探索が有効。
# * $x \in (0, N)$ の範囲で探索し、**相対誤差 or 絶対誤差 ≤ 0.001** になるまで繰り返します。

# ---

# ## ✅ Python 実装（型付き）
import sys
# from typing import Tuple

def solve() -> None:
    input_str: str = sys.stdin.read().strip()
    N: float = float(input_str)

    low: float = 0.0
    high: float = max(1.0, N)
    mid: float = 0.0

    for _ in range(100):
        mid = (low + high) / 2
        f: float = mid**3 + mid
        if f > N:
            high = mid
        else:
            low = mid

    print(f"{mid:.6f}")

if __name__ == "__main__":
    solve()
# ```

# ---

# ## ✅ 使用例

# ### 入力:

# ```
# 2
# ```

# ### 出力:

# ```
# 1.000000
# ```

# ---

# ## ✅ 処理時間・メモリ使用量の目安

# | 指標         | 内容                      |
# | ---------- | ----------------------- |
# | **時間計算量**  | $O(\log N)$（収束まで100回以下） |
# | **実行時間**   | 約 1〜3 ms（CPython 3.8+）  |
# | **メモリ使用量** | 約 10〜20MB（標準ライブラリ＋浮動小数） |

# ---

# ## ✅ 解説図（簡易）

# ```text
# 探索範囲:
#    ┌──────────────┐
# low│              │high
#  0.0              N

# 収束イメージ:
# 1回目: [0 ............. N]
# 2回目: [0 ......... mid]
# 3回目: [mid .. high]
# ...
# 最終:  [x - ε .. x + ε]
# ```

# ---

# ## ✅ なぜ 100 回で十分か？

# * 二分探索により探索幅が $\frac{1}{2^n}$ に。
# * 精度が $10^{-6}$ 必要なら $n ≈ 20$ 回で十分。
# * 安全に **100回**繰り返すことで収束を保証。

# ---

# ご希望があれば、NumPy や decimal ライブラリを用いた高精度バージョンも提供可能です。

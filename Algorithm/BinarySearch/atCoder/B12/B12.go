// 以下は、Go言語（Golang）を用いて方程式 $x^3 + x = N$ を満たす正の実数 $x$ を **二分探索で求めるコード**です。
// **型を明示**し、**処理時間とメモリ消費量**にも配慮しています。

// ## ✅ 解法：二分探索

// * 関数 $f(x) = x^3 + x$ は **単調増加関数**なので、**二分探索**が有効。
// * 解の誤差が **絶対または相対誤差 0.001 以下**になるまで探索。
// * Go の `float64` を使い、収束精度は十分。

// ## ✅ Go 実装コード（型明示）
package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

func main() {
	// 標準入力読み込み
	reader := bufio.NewReader(os.Stdin)
	line, _ := reader.ReadString('\n')
	NStr := strings.TrimSpace(line)
	N, err := strconv.ParseFloat(NStr, 64)
	if err != nil {
		panic(err)
	}

	// 型: float64
	var low float64 = 0.0
	var high float64 = math.Max(1.0, N)
	var mid float64

	for i := 0; i < 100; i++ {
		mid = (low + high) / 2
		f := mid*mid*mid + mid // f(x) = x^3 + x
		if f > N {
			high = mid
		} else {
			low = mid
		}
	}

	// 小数点6桁まで出力
	fmt.Printf("%.6f\n", mid)
}

// ## ✅ 使用例

// ### 入力:

// ```
// 2
// ```

// ### 出力:

// ```
// 1.000000
// ```

// ---

// ## ✅ 型の明示について

// | 変数名    | 型         | 説明              |
// | ------ | --------- | --------------- |
// | `N`    | `float64` | 入力値（正の実数）       |
// | `low`  | `float64` | 二分探索の下限         |
// | `high` | `float64` | 二分探索の上限         |
// | `mid`  | `float64` | 探索中間値（出力対象）     |
// | `f`    | `float64` | 計算された関数値 $f(x)$ |

// ---

// ## ✅ 処理時間・メモリ消費量の目安（Go）

// | 指標     | 内容                        |
// | ------ | ------------------------- |
// | 時間計算量  | $O(\log N)$（最大100ステップ）    |
// | 実行時間   | 約 1〜2 ms（Go 1.20以降の標準ビルド） |
// | メモリ使用量 | 数MB（浮動小数 + 入出力バッファのみ）     |

// ---

// ## ✅ なぜ100回ループするのか？

// * $2^{-20} ≈ 10^{-6}$ なので、誤差 $\leq 0.001$ にするには20〜30回で十分。
// * **100回のループ**にすることで安全に収束するようにしている。

// ---

// ## ✅ 簡易図解：探索の流れ

// ```
// f(x) = x^3 + x の単調増加

// 探索範囲:
// [low]----------------[high]
//  0.0                   N

// 繰り返しで収束:
// [0.0 .......... mid .......... N]
//          ↓
// [0.0 ...... mid ......]
//          ↓
// [mid - ε ... mid + ε] ≈ 解
// ```

// ---

// Goでは `float64` の精度で十分な誤差範囲（0.001）に収束できます。
// ご希望があれば、誤差制御をループ回数ではなく **相対誤差判定で停止**させる改良も可能です。

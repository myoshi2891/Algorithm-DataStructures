# 以下に、**Python (CPython 3.11.4)** でのフィボナッチ数列の第 N 項を $10^9+7$ で割った余りを求める実装を示します。

# ---

# ## ✅ 要求事項への対応

# | 項目      | 対応内容                           |
# | ------- | ------------------------------ |
# | 言語      | Python 3.11.4                  |
# | 計算量     | 時間：O(N)、空間：O(1)                |
# | 型の明示    | 関数定義・引数・返り値の型ヒントを明示            |
# | 処理時間対策  | ループ1回で完結                       |
# | メモリ制限対策 | 配列を使わず定数個の変数で完結                |
# | 入出力     | `sys.stdin` から読み取り、`print` で出力 |

# ---

# ## 🧪 Python 実装コード（標準入力 / 型明示 / O(1) 空間）

# ```python
import sys

MOD: int = 1_000_000_007

def fibonacci_mod(n: int) -> int:
    """
    フィボナッチ数列の第 n 項を MOD (10^9 + 7) で割った余りを返す関数

    Parameters:
    ----------
    n : int
        求めたいフィボナッチ数列の項番号 (3 <= n <= 10^7)

    Returns:
    -------
    int
        フィボナッチ数列の第 n 項を 10^9 + 7 で割った余り
    """
    if n == 1 or n == 2:
        return 1

    a: int = 1  # F(n-2)
    b: int = 1  # F(n-1)

    for _ in range(3, n + 1):
        a, b = b, (a + b) % MOD

    return b

def main() -> None:
    input_str: str = sys.stdin.read()
    n: int = int(input_str.strip())
    result: int = fibonacci_mod(n)
    print(result)

if __name__ == "__main__":
    main()
# ```

# ---

# ## ✅ 解説と性能

# ### 処理フローの概要（図示）

# ```
# Step i:      a        b        next
# ----------------------------------------
# Init         1        1         -
# i = 3        1        1         2
# i = 4        1        2         3
# i = 5        2        3         5
# ...          ...      ...       ...
# i = N-1      a(n-3)   a(n-2)    a(n-1)
# i = N        a(n-2)   a(n-1)    a(n)
# ```

# ### 実行性能

# | 指標        | 値                |
# | --------- | ---------------- |
# | 時間計算量     | $O(N)$           |
# | 空間計算量     | $O(1)$（変数2つのみ）   |
# | 実行時間（最大N） | 約0.5〜1秒程度        |
# | メモリ消費量    | 数KB（配列不使用）       |
# | 対応最大入力    | $N = 10^7$ 余裕で対応 |

# ---

# ## ✅ 入力例と出力例

# ### 入力:

# ```
# 6
# ```

# ### 出力:

# ```
# 8
# ```

# ---

# ## ✅ 実行方法（AtCoder形式）

# 1. ファイル名: `main.py`
# 2. 実行例（UNIX系環境）:

#    ```bash
#    python3 main.py < input.txt
#    ```

# ---

# ## ✅ 拡張案

# * `O(log N)` にしたい場合は「行列累乗法」または「高速Doubling法」に移行できます。
# * ご希望であれば、こちらも **図解付きで提供可能** です。

# ---

# 必要があれば、高速版（Doubling や 行列累乗）も Python で実装・図解可能です。ご希望ですか？

// 以下は、指定された条件（Node.js / `fs` を使った標準入力 / 実行時間とメモリ制限内）に従い、**フィボナッチ数列の第 N 項を $10^9+7$ で割った余り**を計算するJavaScriptコードです。

// ---

// ### ✅ 実装のポイント

// * 定数 `MOD = 1_000_000_007` を使って **オーバーフローを防止**。
// * **繰り返し計算（O(N)）** を使用（メモリを抑えつつ高速）。
// * `BigInt` は使いません（今回は必要ありません）。
// * **配列を使わず2変数だけ保持**して、**メモリ効率を最大限に向上**。

// ---

// ### 📦 JavaScript (Node.js 18.16.1) 実装

// ```javascript
// 入力処理（標準入力）
const fs = require('fs');
const input = fs.readFileSync('/dev/stdin', 'utf8').trim();
const N = parseInt(input);

// フィボナッチ数列の第 N 項を MOD で割った余りを返す
// @param {number} n - 求めたい項の番号
// @return {number} - フィボナッチ数列の第 n 項の MOD（10^9+7）余り
function fibonacciMod(n) {
    const MOD = 1_000_000_007;
    if (n === 1 || n === 2) return 1;

    let a = 1; // a(n-2)
    let b = 1; // a(n-1)
    for (let i = 3; i <= n; i++) {
        const next = (a + b) % MOD;
        a = b;
        b = next;
    }
    return b;
}

// 出力
console.log(fibonacciMod(N));
// ```

// ---

// ### 📈 実行性能

// * **時間計算量**: `O(N)` （ループ1回）
// * **空間計算量**: `O(1)` （変数2つのみ使用）
// * **実行時間目安**:

//   * `N = 10^7` でも **数百ms〜1秒未満**（Node.jsのループ処理高速）
// * **メモリ使用量**:

//   * 数十KB程度（**配列未使用**）

// ---

// ### 🧪 テスト例

// #### 入力:

// ```
// 6
// ```

// #### 出力:

// ```
// 8
// ```

// #### 入力:

// ```
// 8691200
// ```

// #### 出力:

// ```
// 922041576
// ```

// ---

// さらに高速化を求める場合、`O(log N)` の**行列累乗**法に切り替えることも可能です。希望があればその版もご提供できます。

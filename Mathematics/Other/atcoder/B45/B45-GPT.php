<!-- 以下に、**PHP 8.2.8** を用いた解答を提示します。
ご要望に基づき：

* 型を明示（PHP 8.2 ではスカラ型の引数・戻り値の型指定が可能）
* 処理時間・メモリを O(1) に抑える
* 関数ベースで処理を記述
* 整数の範囲（-10^18 ～ 10^18）にも対応可能なように `bcmath` を使用（必要に応じて）

---

## ✅ 問題のポイント（再確認）

操作：「2つの数を選んで一方に +1、もう一方に -1」→ 合計値は不変
**よって、 a + b + c === 0 のときだけ Yes**

---

## ✅ PHP 実装コード（関数・型明示・定数時間処理）

```php -->
<?php

/**
 * 3つの整数を操作によってすべて0にできるか判定する。
 *
 * @param string $a 文字列としての整数（-10^18 ～ 10^18）
 * @param string $b 文字列としての整数（-10^18 ～ 10^18）
 * @param string $c 文字列としての整数（-10^18 ～ 10^18）
 * @return string "Yes" または "No"
 */
function canMakeAllZero(string $a, string $b, string $c): string
{
    // 合計 = a + b + c（bcmathで大きな整数に対応）
    $sum = bcadd(bcadd($a, $b), $c);
    return $sum === "0" ? "Yes" : "No";
}

/**
 * 標準入力から3つの整数を読み取り、判定を行う
 */
function main(): void
{
    // 標準入力から1行読み込み（例: "3 -4 1\n"）
    $input = trim(fgets(STDIN));
    [$a, $b, $c] = explode(' ', $input);
    
    // 判定と出力
    $result = canMakeAllZero($a, $b, $c);
    echo $result . PHP_EOL;
}

main();
// ```

// ---

// ## ✅ 実行例

// ```bash
// $ echo "3 -4 1" | php solution.php
// Yes
// ```

// ---

// ## ✅ 処理時間・メモリ消費

// | 項目    | 内容                            |
// | ----- | ----------------------------- |
// | 時間計算量 | O(1)（加算・比較のみ）                 |
// | メモリ消費 | 入力文字列と変数3つ＋内部文字列 → 数十バイト程度    |
// | 精度保証  | bcmath（任意精度整数計算）で 10^18 以上も安全 |

// ---

// ## ✅ 使用関数の説明

// * `bcadd(string $left, string $right, int $scale = 0): string`
//   → 任意精度で加算（`scale=0` で整数加算）

// * `fgets(STDIN)`
//   → 標準入力を1行読み込み

// * `explode(' ', ...)`
//   → 空白で分割し、配列化

// ---

// ## ✅ 型の理由と互換性

// * PHP 8.2 では、**引数や戻り値にスカラ型（`string`, `int`, `float`）の型指定が可能**。
// * 任意精度整数 (`-10^18～10^18`) を扱うため、**`string`型＋bcmath** を使用。
// * **`int` にすると 64bit 環境では制限（±9.2×10^18）に近くなるため危険**。

// ---

// ## ✅ まとめ

// | 項目     | 内容                         |
// | ------ | -------------------------- |
// | 処理時間   | O(1)                       |
// | メモリ使用量 | 数十バイト程度                    |
// | 型      | 関数定義で明示（string → string）   |
// | 任意精度対応 | `bcmath` 使用で安全             |
// | 判定条件   | `a + b + c === 0` なら "Yes" |

// ---

// 必要であれば、型安全性を強化したバージョンや、入力検証付きも提供可能です。